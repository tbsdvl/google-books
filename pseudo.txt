* - indicates task is done

*1. Start by using the 01-Ins_Mern/create-react-express example as a base for your application.*

*2. Add code to connect to a MongoDB database named googlebooks using the mongoose npm package.

// require mongoose
const mongoose = require('mongoose');

// Connect to a MongoDB database
// Need to update the mongodb database
mongoose.connect(
  process.env.MONGODB_URI || "mongodb://localhost/googlebooks",
  { useUnifiedTopology: true, useNewUrlParser: true, useCreateIndex: true }
);

*3. Using mongoose, then create a Book schema.

// require mongoose
const mongoose = require('mongoose');
const { Schema } = mongoose;

// Schema for the google book
const bookSchema = new Schema({
  title: {
    type: String,
    required: true,
  },
  authors: {
    type: [String],
  },
  description: {
    type: String,
  },
  image: {
    type: String,
  },
  link: {
    type: String, 
  },
})

// New mongoose model
const Book = mongoose.model('Book', bookSchema);

// Export the model
module.exports = Book;

*4. At a minimum, books should have each of the following fields:

title - Title of the book from the Google Books API

authors - The books's author(s) as returned from the Google Books API

description - The book's description as returned from the Google Books API

image - The Book's thumbnail image as returned from the Google Books API

link - The Book's information link as returned from the Google Books API

Creating documents in your books collection similar to the following:

{
  authors: ["Suzanne Collins"]
  description: "Set in a dark vision of the near future, a terrifying reality TV show is taking place. Twelve boys and twelve girls are forced to appear in a live event called The Hunger Games. There is only one rule: kill or be killed. When sixteen-year-old Katniss Everdeen steps forward to take her younger sister's place in the games, she sees it as a death sentence. But Katniss has been close to death before. For her, survival is second nature."
  image: "http://books.google.com/books/content?id=sazytgAACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"
  link: "http://books.google.com/books?id=sazytgAACAAJ&dq=title:The+Hunger+Games&hl=&source=gbs_api"
  title: "The Hunger Games"
}

5. Create a layout similar to the mockups displayed above. This should be a SPA (Single Page Application) that uses react-router-dom to navigate, hide and show your React components without changing the route within Express.
The layout should include at least two React Components for each page Search and Saved.

Header Component

import React, { Component } from 'react';

class Header extends Component {
    render() {
        return (
            <header>
                <h1>Google Books</h1>
            </header>
        )
    }
}

export default Header;

Feel free to try out alternative CSS framework to Bootstrap.

6. Add the following Express routes for your app:
/api/books (get) - Should return all saved books as JSON.

/api/books (post) - Will be used to save a new book to the database.

/api/books/:id (delete) - Will be used to delete a book from the database by Mongo _id.

(get) - Will load your single HTML page in client/build/index.html. Make sure you have this after all other routes are defined.

Deploy your application to Heroku once complete. You must use Create React App and current versions of React and React-Router-Dom for this assignment.

===================================================
TO THE CENTRAL GRADER
===================================================

I was unable to finish this application. 

While get and post methods do work, I still struggle to 
Setup a post method to send data to the "Saved" component
and delete data from the database. My problem is appending
a "SaveBtn" component to the BookListItem component.
I understand why the SaveBtn isn't collecting props and using the
book _id as an argument because it exists outside the BookListItem component.

If I were to send the data to a different component, I could try and 
jury-rig my way through with some jsx style vanilla javascript collecting
element data values and pushing them over to the Saved component 
using an onClick attribute with a function. While it is an odd approach,
I still think it would work by appending new elements containing data
from BookListItem cards like the title, authors, description, etc.

My greatest mistake was most likely not using a controller to handle
the functionality given a get, post, put, delete request. I etup
my apiRoutes to contain both the routing and functions, which hindered
my progress multiple times. I've been able to resolve some issues and
find workarounds by observing component functions from previous activities 
that affect props, state, handlers, etc. and use the API.js file to call functions
for data collection/insertion given a particular route. 

MongoDB Atlas is not connecting again, I experienced this issue with my Fitness Tracker Application.
I am unsure as to why heroku does not connect to the database, I follow the directions
but it has to be something on my end with the way the databases are setup in my cluster.
Maybe heroku does not realize my 'googlebooks' database or something is wrong with my password.
A quick note, I'd like an updated instructional video for connecting Heroku to MongoDB Atlas for future
classes as the instructor's example uses mLab, a discontinued add-on in heroku's resources.
The tutorial covers the basics, but visual support to understand the EXACT process will only be
beneficial to students like me and future students.

These are the current problems with my application. I will continue to see what I can do with the 
delete/put/post methods. I am grateful in advance if you could give feedback about my current issues.

Thank you for reading my pseudocode and notes on my issues.

- Triston
